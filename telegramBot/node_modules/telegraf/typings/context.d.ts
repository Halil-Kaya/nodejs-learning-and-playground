import * as tt from './telegram-types';
import ApiClient from './core/network/client';
import Telegram from './telegram';
declare type Tail<T> = T extends [unknown, ...infer U] ? U : never;
declare type Shorthand<FName extends Exclude<keyof Telegram, keyof ApiClient>> = Tail<Parameters<Telegram[FName]>>;
export declare const UpdateTypes: readonly ["callback_query", "channel_post", "chosen_inline_result", "edited_channel_post", "edited_message", "inline_query", "message", "pre_checkout_query", "shipping_query", "poll", "poll_answer"];
export declare class Context {
    readonly update: tt.Update;
    readonly tg: Telegram;
    readonly botInfo: tt.UserFromGetMe;
    readonly state: Record<string | symbol, any>;
    constructor(update: tt.Update, tg: Telegram, botInfo: tt.UserFromGetMe);
    get updateType(): "callback_query" | "channel_post" | "chosen_inline_result" | "edited_channel_post" | "edited_message" | "inline_query" | "message" | "pre_checkout_query" | "shipping_query" | "poll" | "poll_answer" | undefined;
    get me(): string;
    get telegram(): Telegram;
    get message(): (tt.Update.New & tt.Update.NonChannel & tt.Message.TextMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.DocumentMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.AudioMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.ChannelChatCreatedMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.ConnectedWebsiteMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.ContactMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.DeleteChatPhotoMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.DiceMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.GameMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.GroupChatCreatedMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.InvoiceMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.LeftChatMemberMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.LocationMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.MigrateFromChatIdMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.MigrateToChatIdMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.NewChatMembersMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.NewChatPhotoMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.NewChatTitleMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.PassportDataMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.ProximityAlertTriggeredMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.PhotoMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.PinnedMessageMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.PollMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.StickerMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.SuccessfulPaymentMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.SupergroupChatCreated) | (tt.Update.New & tt.Update.NonChannel & tt.Message.VideoMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.VideoNoteMessage) | (tt.Update.New & tt.Update.NonChannel & tt.Message.VoiceMessage) | undefined;
    get editedMessage(): (tt.Update.Edited & tt.Update.NonChannel & tt.Message.TextMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.DocumentMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.AudioMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.ChannelChatCreatedMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.ConnectedWebsiteMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.ContactMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.DeleteChatPhotoMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.DiceMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.GameMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.GroupChatCreatedMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.InvoiceMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.LeftChatMemberMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.LocationMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.MigrateFromChatIdMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.MigrateToChatIdMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.NewChatMembersMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.NewChatPhotoMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.NewChatTitleMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.PassportDataMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.ProximityAlertTriggeredMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.PhotoMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.PinnedMessageMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.PollMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.StickerMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.SuccessfulPaymentMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.SupergroupChatCreated) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.VideoMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.VideoNoteMessage) | (tt.Update.Edited & tt.Update.NonChannel & tt.Message.VoiceMessage) | undefined;
    get inlineQuery(): tt.InlineQuery | undefined;
    get shippingQuery(): tt.ShippingQuery | undefined;
    get preCheckoutQuery(): tt.PreCheckoutQuery | undefined;
    get chosenInlineResult(): tt.ChosenInlineResult | undefined;
    get channelPost(): (tt.Update.New & tt.Update.Channel & tt.Message.TextMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.DocumentMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.AudioMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.ChannelChatCreatedMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.ConnectedWebsiteMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.ContactMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.DeleteChatPhotoMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.DiceMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.GameMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.GroupChatCreatedMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.InvoiceMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.LeftChatMemberMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.LocationMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.MigrateFromChatIdMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.MigrateToChatIdMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.NewChatMembersMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.NewChatPhotoMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.NewChatTitleMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.PassportDataMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.ProximityAlertTriggeredMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.PhotoMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.PinnedMessageMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.PollMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.StickerMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.SuccessfulPaymentMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.SupergroupChatCreated) | (tt.Update.New & tt.Update.Channel & tt.Message.VideoMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.VideoNoteMessage) | (tt.Update.New & tt.Update.Channel & tt.Message.VoiceMessage) | undefined;
    get editedChannelPost(): (tt.Update.Edited & tt.Update.Channel & tt.Message.TextMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.DocumentMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.AudioMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.ChannelChatCreatedMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.ConnectedWebsiteMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.ContactMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.DeleteChatPhotoMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.DiceMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.GameMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.GroupChatCreatedMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.InvoiceMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.LeftChatMemberMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.LocationMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.MigrateFromChatIdMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.MigrateToChatIdMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.NewChatMembersMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.NewChatPhotoMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.NewChatTitleMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.PassportDataMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.ProximityAlertTriggeredMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.PhotoMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.PinnedMessageMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.PollMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.StickerMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.SuccessfulPaymentMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.SupergroupChatCreated) | (tt.Update.Edited & tt.Update.Channel & tt.Message.VideoMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.VideoNoteMessage) | (tt.Update.Edited & tt.Update.Channel & tt.Message.VoiceMessage) | undefined;
    get callbackQuery(): tt.CallbackQuery.DataCallbackQuery | tt.CallbackQuery.GameShortGameCallbackQuery | undefined;
    get poll(): tt.Poll | undefined;
    get pollAnswer(): tt.PollAnswer | undefined;
    get chat(): tt.Chat.PrivateChat | tt.Chat.GroupChat | tt.Chat.SupergroupChat | tt.Chat.ChannelChat | undefined;
    get senderChat(): tt.Chat.PrivateChat | tt.Chat.GroupChat | tt.Chat.SupergroupChat | tt.Chat.ChannelChat | undefined;
    get from(): tt.User | undefined;
    get inlineMessageId(): string | undefined;
    get passportData(): tt.PassportData | undefined;
    /** @deprecated use `ctx.telegram.webhookReply` */
    get webhookReply(): boolean;
    set webhookReply(enable: boolean);
    private assert;
    answerInlineQuery(...args: Shorthand<'answerInlineQuery'>): Promise<true>;
    answerCbQuery(...args: Shorthand<'answerCbQuery'>): Promise<true>;
    answerGameQuery(...args: Shorthand<'answerGameQuery'>): Promise<true>;
    answerShippingQuery(...args: Shorthand<'answerShippingQuery'>): Promise<true>;
    answerPreCheckoutQuery(...args: Shorthand<'answerPreCheckoutQuery'>): Promise<true>;
    editMessageText(text: string, extra?: tt.ExtraEditMessageText): Promise<true | (tt.Update.Edited & tt.Message.TextMessage)>;
    editMessageCaption(caption: string | undefined, extra?: tt.ExtraEditMessageCaption): Promise<true | (tt.Update.Edited & tt.Message.CaptionableMessage)>;
    editMessageMedia(media: tt.InputMedia, extra?: tt.ExtraEditMessageMedia): Promise<true | (tt.Update.Edited & tt.Message.AnimationMessage) | (tt.Update.Edited & tt.Message.AudioMessage) | (tt.Update.Edited & tt.Message.DocumentMessage) | (tt.Update.Edited & tt.Message.PhotoMessage) | (tt.Update.Edited & tt.Message.VideoMessage)>;
    editMessageReplyMarkup(markup: tt.InlineKeyboardMarkup | undefined): Promise<true | (tt.Update.Edited & tt.Message.LocationMessage) | (tt.Update.Edited & tt.Message.TextMessage) | (tt.Update.Edited & tt.Message.AnimationMessage) | (tt.Update.Edited & tt.Message.AudioMessage) | (tt.Update.Edited & tt.Message.DocumentMessage) | (tt.Update.Edited & tt.Message.PhotoMessage) | (tt.Update.Edited & tt.Message.VideoMessage) | (tt.Update.Edited & tt.Message.ChannelChatCreatedMessage) | (tt.Update.Edited & tt.Message.ConnectedWebsiteMessage) | (tt.Update.Edited & tt.Message.ContactMessage) | (tt.Update.Edited & tt.Message.DeleteChatPhotoMessage) | (tt.Update.Edited & tt.Message.DiceMessage) | (tt.Update.Edited & tt.Message.GameMessage) | (tt.Update.Edited & tt.Message.GroupChatCreatedMessage) | (tt.Update.Edited & tt.Message.InvoiceMessage) | (tt.Update.Edited & tt.Message.LeftChatMemberMessage) | (tt.Update.Edited & tt.Message.MigrateFromChatIdMessage) | (tt.Update.Edited & tt.Message.MigrateToChatIdMessage) | (tt.Update.Edited & tt.Message.NewChatMembersMessage) | (tt.Update.Edited & tt.Message.NewChatPhotoMessage) | (tt.Update.Edited & tt.Message.NewChatTitleMessage) | (tt.Update.Edited & tt.Message.PassportDataMessage) | (tt.Update.Edited & tt.Message.ProximityAlertTriggeredMessage) | (tt.Update.Edited & tt.Message.PinnedMessageMessage) | (tt.Update.Edited & tt.Message.PollMessage) | (tt.Update.Edited & tt.Message.StickerMessage) | (tt.Update.Edited & tt.Message.SuccessfulPaymentMessage) | (tt.Update.Edited & tt.Message.SupergroupChatCreated) | (tt.Update.Edited & tt.Message.VenueMessage) | (tt.Update.Edited & tt.Message.VideoNoteMessage) | (tt.Update.Edited & tt.Message.VoiceMessage)>;
    editMessageLiveLocation(latitude: number, longitude: number, extra?: tt.ExtraEditMessageLiveLocation): Promise<true | (tt.Update.Edited & tt.Message.LocationMessage)>;
    stopMessageLiveLocation(markup?: tt.InlineKeyboardMarkup): Promise<true | (tt.Update.Edited & tt.Message.LocationMessage)>;
    reply(...args: Shorthand<'sendMessage'>): Promise<tt.Message.TextMessage>;
    getChat(...args: Shorthand<'getChat'>): Promise<tt.ChatFromGetChat>;
    exportChatInviteLink(...args: Shorthand<'exportChatInviteLink'>): Promise<string>;
    kickChatMember(...args: Shorthand<'kickChatMember'>): Promise<true>;
    unbanChatMember(...args: Shorthand<'unbanChatMember'>): Promise<true>;
    restrictChatMember(...args: Shorthand<'restrictChatMember'>): Promise<true>;
    promoteChatMember(...args: Shorthand<'promoteChatMember'>): Promise<true>;
    setChatAdministratorCustomTitle(...args: Shorthand<'setChatAdministratorCustomTitle'>): Promise<true>;
    setChatPhoto(...args: Shorthand<'setChatPhoto'>): Promise<true>;
    deleteChatPhoto(...args: Shorthand<'deleteChatPhoto'>): Promise<true>;
    setChatTitle(...args: Shorthand<'setChatTitle'>): Promise<true>;
    setChatDescription(...args: Shorthand<'setChatDescription'>): Promise<true>;
    pinChatMessage(...args: Shorthand<'pinChatMessage'>): Promise<true>;
    unpinChatMessage(...args: Shorthand<'unpinChatMessage'>): Promise<true>;
    unpinAllChatMessages(...args: Shorthand<'unpinAllChatMessages'>): Promise<true>;
    leaveChat(...args: Shorthand<'leaveChat'>): Promise<true>;
    setChatPermissions(...args: Shorthand<'setChatPermissions'>): Promise<true>;
    getChatAdministrators(...args: Shorthand<'getChatAdministrators'>): Promise<tt.ChatMember[]>;
    getChatMember(...args: Shorthand<'getChatMember'>): Promise<tt.ChatMember>;
    getChatMembersCount(...args: Shorthand<'getChatMembersCount'>): Promise<number>;
    setPassportDataErrors(errors: readonly tt.PassportElementError[]): Promise<true>;
    replyWithPhoto(...args: Shorthand<'sendPhoto'>): Promise<tt.Message.PhotoMessage>;
    replyWithMediaGroup(...args: Shorthand<'sendMediaGroup'>): Promise<(tt.Message.DocumentMessage | tt.Message.AudioMessage | tt.Message.PhotoMessage | tt.Message.VideoMessage)[]>;
    replyWithAudio(...args: Shorthand<'sendAudio'>): Promise<tt.Message.AudioMessage>;
    replyWithDice(...args: Shorthand<'sendDice'>): Promise<tt.Message.DiceMessage>;
    replyWithDocument(...args: Shorthand<'sendDocument'>): Promise<tt.Message.DocumentMessage>;
    replyWithSticker(...args: Shorthand<'sendSticker'>): Promise<tt.Message.StickerMessage>;
    replyWithVideo(...args: Shorthand<'sendVideo'>): Promise<tt.Message.VideoMessage>;
    replyWithAnimation(...args: Shorthand<'sendAnimation'>): Promise<tt.Message.AnimationMessage>;
    replyWithVideoNote(...args: Shorthand<'sendVideoNote'>): Promise<tt.Message.VideoNoteMessage>;
    replyWithInvoice(...args: Shorthand<'sendInvoice'>): Promise<tt.Message.InvoiceMessage>;
    replyWithGame(...args: Shorthand<'sendGame'>): Promise<tt.Message.GameMessage>;
    replyWithVoice(...args: Shorthand<'sendVoice'>): Promise<tt.Message.VoiceMessage>;
    replyWithPoll(...args: Shorthand<'sendPoll'>): Promise<tt.Message.PollMessage>;
    replyWithQuiz(...args: Shorthand<'sendQuiz'>): Promise<tt.Message.PollMessage>;
    stopPoll(...args: Shorthand<'stopPoll'>): Promise<tt.Poll>;
    replyWithChatAction(...args: Shorthand<'sendChatAction'>): Promise<true>;
    replyWithLocation(...args: Shorthand<'sendLocation'>): Promise<tt.Message.LocationMessage>;
    replyWithVenue(...args: Shorthand<'sendVenue'>): Promise<tt.Message.VenueMessage>;
    replyWithContact(...args: Shorthand<'sendContact'>): Promise<tt.Message.ContactMessage>;
    getStickerSet(setName: string): Promise<tt.StickerSet>;
    setChatStickerSet(setName: string): Promise<true>;
    deleteChatStickerSet(): Promise<true>;
    setStickerPositionInSet(sticker: string, position: number): Promise<true>;
    setStickerSetThumb(...args: Parameters<Telegram['setStickerSetThumb']>): Promise<true>;
    deleteStickerFromSet(sticker: string): Promise<true>;
    uploadStickerFile(...args: Shorthand<'uploadStickerFile'>): Promise<tt.File>;
    createNewStickerSet(...args: Shorthand<'createNewStickerSet'>): Promise<true>;
    addStickerToSet(...args: Shorthand<'addStickerToSet'>): Promise<true>;
    getMyCommands(): Promise<tt.BotCommand[]>;
    setMyCommands(commands: readonly tt.BotCommand[]): Promise<true>;
    replyWithMarkdown(markdown: string, extra?: tt.ExtraReplyMessage): Promise<tt.Message.TextMessage>;
    replyWithMarkdownV2(markdown: string, extra?: tt.ExtraReplyMessage): Promise<tt.Message.TextMessage>;
    replyWithHTML(html: string, extra?: tt.ExtraReplyMessage): Promise<tt.Message.TextMessage>;
    deleteMessage(messageId?: number): Promise<true>;
    forwardMessage(chatId: string | number, extra?: {
        disable_notification?: boolean;
    }): Promise<tt.Message>;
    copyMessage(chatId: string | number, extra?: tt.ExtraCopyMessage): Promise<tt.MessageId>;
}
export default Context;
//# sourceMappingURL=context.d.ts.map